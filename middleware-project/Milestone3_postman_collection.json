{
  "info": {
    "name": "Module3 IVR Conversation Tests",
    "description": "Postman collection for /ivr/conversation endpoint covering ACS intents, BAP intents, unknown and negative cases",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.1"
  },
  "variable": [
    { "key": "baseUrl", "value": "http://localhost:3000", "type": "string" },
    { "key": "sessionId", "value": "", "type": "string" }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Auto-generate a unique sessionId per request",
          "const uniqueSessionId = `sess-${Date.now()}-${Math.floor(Math.random() * 1000)}`;",
          "pm.variables.set('sessionId', uniqueSessionId);",
          "console.log('Generated sessionId:', uniqueSessionId);"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "ACS - Check Balance",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"Please check my balance\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Has data.sessionId\", () => pm.expect(json.data).to.have.property('sessionId'));",
              "pm.test(\"Has response text\", () => pm.expect(json.data).to.have.property('response'));",
              "pm.test(\"Response mentions balance or ₹\", () => {",
              "  pm.expect(String(json.data.response).toLowerCase()).to.satisfy(s => s.includes('balance') || s.includes('₹') || s.includes('$'));",
              "});",
              "pm.test(\"Content-Type is JSON\", () => pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'));"
            ]
          }
        }
      ]
    },
    
    {
      "name": "ACS - Recharge",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"Recharge my account for 100\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Has response text\", () => pm.expect(json.data).to.have.property('response'));",
              "pm.test(\"Response mentions recharge or ₹\", () => {",
              "  pm.expect(String(json.data.response)).to.satisfy(s => /₹|recharge/i.test(s));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "ACS - Report Lost Card",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"Report Lost Card\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Message about card/block\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes('card') || t.includes('block') || t.includes('blocked'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "ACS - Activate Card",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"How can I activate my new card?\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Instruction for activation\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes('enter') || t.includes('16-digit') || t.includes('activate'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "ACS - Update Contact",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"I want to update mobile number\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Contains link or update instruction\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes('link') || t.includes('update') || t.includes('mobile'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "ACS - Report Suspicious Transaction",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"I see a suspicious transaction\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200 and acknowledgement\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Mentions hold/fraud/contact\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes('hold') || t.includes('fraud') || t.includes('contact'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "BAP - Agent Handoff",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"I want to talk to an agent\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200 and agent message\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Mentions agent or connecting\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes('agent') || t.includes('connecting') || t.includes('hold'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "BAP - Mini Statement",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"Give me a mini statement\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200 and mini statement content\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Contains transactions/debit/credit\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes('transactions') || t.includes('debit') || t.includes('credit'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "BAP - Pay Utility Bill",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"Pay my electricity bill\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200 and bill prompt\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Mentions customer id or enter\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes('customer id') || t.includes('bill') || t.includes('enter'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "BAP - Loan Details",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"Tell me about my loan\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200 and loan info\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Mentions EMI/outstanding/loan\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes('emi') || t.includes('outstanding') || t.includes('loan'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "BAP - Request E-Statement",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"Send me my e-statement\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200 and e-statement confirmation\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Mentions e-statement or email\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes('e-statement') || t.includes('email') || t.includes('sent'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Unknown Intent - Fallback",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"query\": \"What's the weather today?\"\n}"
        },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status 200 and fallback response\", () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.test(\"Has fallback text asking to rephrase or apologizing\", () => {",
              "  const s = String(json.data.response).toLowerCase();",
              "  pm.expect(s).to.satisfy(t => t.includes(\"didn't understand\") || t.includes('rephrase') || t.includes('sorry'));",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "Negative - Missing sessionId",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{\n  \"query\": \"check balance\"\n}" },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Error status (400/422/500)\", () => pm.expect(pm.response.code).to.be.oneOf([400,422,500]));",
              "const json = (() => { try { return pm.response.json(); } catch(e){ return {}; } })();",
              "pm.test(\"Has error field\", () => pm.expect(json).to.have.property('error'));"
            ]
          }
        }
      ]
    },
    {
      "name": "Negative - Missing query",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{\n  \"sessionId\": \"{{sessionId}}\"\n}" },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Error status (400/422/500)\", () => pm.expect(pm.response.code).to.be.oneOf([400,422,500]));",
              "const json = (() => { try { return pm.response.json(); } catch(e){ return {}; } })();",
              "pm.test(\"Has error field\", () => pm.expect(json).to.have.property('error'));"
            ]
          }
        }
      ]
    },
    {
      "name": "Negative - Empty body",
      "request": {
        "method": "POST",
        "header": [{ "key": "Content-Type", "value": "application/json" }],
        "body": { "mode": "raw", "raw": "{}" },
        "url": { "raw": "{{baseUrl}}/ivr/conversation", "host": ["{{baseUrl}}"], "path": ["ivr", "conversation"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Reject empty body with error status\", () => {",
              "  pm.expect(pm.response.code).to.be.oneOf([400,422,500]);",
              "});"
            ]
          }
        }
      ]
    }
  ]
}

